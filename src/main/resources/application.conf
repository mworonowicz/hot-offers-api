akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  serialize-creators = on
}
server {
  host = "0.0.0.0"
  port = 8081
  context = "osm"
}
aws {
  local = false
  region-name = "eu-west-1"
}

osm {
  rate-plans-uri = "http://fr-ota-extranet-elb-dev-1538604172.eu-west-1.elb.amazonaws.com/api/internal/v1/accommodations/hotelId/rooms/roomId/rate-plans"
  parallelism = 1
  sqs {
    endpoint = "https://sqs.eu-west-1.amazonaws.com"
    availability-queue-name = "OTA-AVAILABILITY-DEV"
    rate-queue-name = "OTA-RATE-DEV"
    booking_rule-queue-name = "OTA-BOOKING_RULE-DEV"
  }
  dynamodb-document {
    availability {
      table-name = "OTA-OSM-AVAILABILITIES-DEV"
      primary-key = "documentId"
      range-key = "notificationId"
    }

    rate {
      table-name = "OTA-OSM-RATES-DEV"
      primary-key = "documentId"
      range-key = "notificationId"
    }

    booking-rule {
      table-name = "OTA-OSM-BOOKING_RULES-DEV"
      primary-key = "documentId"
      range-key = "notificationId"
    }

    offer {
      table-name = "OTA-OSM-OFFERS-DEV"
      primary-key = "documentId"
      range-key = "ratePlanId"
    }

    processing-state {
      table-name = "OTA-OSM-PROCESSING_STATE-DEV"
      primary-key = "documentId"
    }
  }
}

akka.stream.alpakka.dynamodb {
  region = "eu-west-1"
  host = "dynamodb.eu-west-1.amazonaws.com"
  port = 443
  parallelism = 5
}